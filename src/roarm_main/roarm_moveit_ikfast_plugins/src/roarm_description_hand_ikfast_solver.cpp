/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2024-08-09 08:34:57.806713
/// Generated using solver translation3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKsin(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[0]);
x6=((0.002)*x2);
x7=((0.002)*x4);
x8=((0.2802)*x2);
x9=((0.2802)*x4);
x10=(x0*x3);
x11=(x1*x5);
x12=(x3*x5);
x13=(x0*x1);
eetrans[0]=((0.01)+(((-0.236815132767373)*x10))+(((0.0300024)*x13))+(((-1.0)*x10*x9))+((x10*x6))+((x13*x8))+((x13*x7)));
IkReal x14=((1.0)*x11);
eetrans[1]=((((0.236815132767373)*x12))+(((-1.0)*x12*x6))+((x12*x9))+(((-0.0300024)*x11))+(((-1.0)*x14*x7))+(((-1.0)*x14*x8)));
eetrans[2]=((0.123059270394975)+((x1*x9))+(((-1.0)*x1*x6))+((x3*x7))+((x3*x8))+(((0.236815132767373)*x1))+(((0.0300024)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=((-0.01)+px);
new_py=((-1.0)*py);
new_pz=((0.123059270394975)+(((-1.0)*pz)));
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((-1.01287359929203)+(((7.47521480617637)*(px*px)))+(((7.47521480617637)*(pz*pz)))+(((7.47521480617637)*(py*py))))) < -1-IKFAST_SINCOS_THRESH || (((-1.01287359929203)+(((7.47521480617637)*(px*px)))+(((7.47521480617637)*(pz*pz)))+(((7.47521480617637)*(py*py))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x15=IKasin(((-1.01287359929203)+(((7.47521480617637)*(px*px)))+(((7.47521480617637)*(pz*pz)))+(((7.47521480617637)*(py*py)))));
j2array[0]=((-1.45191410866581)+(((1.0)*x15)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((1.68967854492398)+(((-1.0)*x15)));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=((3.59140601883394)+sj2+(((8.37202213298632)*cj2))+(((4.94867151071202)*(sj2*sj2)))+(((4.94867151071202)*(cj2*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
j1eval[1]=((3.59140601883394)+sj2+(((8.37202213298632)*cj2))+(((4.94867151071202)*(sj2*sj2)))+(((4.94867151071202)*(cj2*cj2))));
j1eval[2]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
px=0;
py=0;
pp=pz*pz;
j1eval[0]=((((-140.1)*cj2*pz))+((pz*sj2))+(((-118.407566383686)*pz)));
j1eval[1]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x16=pz*pz;
IkReal x17=IKabs(pz);
IkReal x18=x16;
CheckValue<IkReal> x24=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*x17)),-1);
if(!x24.valid){
continue;
}
IkReal x19=x24.value;
IkReal x25 = x18;
if(IKabs(x25)==0){
continue;
}
IkReal x20=pow(x25,-0.5);
CheckValue<IkReal> x26=IKPowWithIntegerCheck(x17,-2);
if(!x26.valid){
continue;
}
if((((1.0)+(((-0.714266882380065)*x16*(x26.value))))) < -0.00001)
continue;
IkReal x21=IKsqrt(((1.0)+(((-0.714266882380065)*x16*(x26.value)))));
IkReal x22=(x16*x19*x20);
IkReal x23=(pz*x20*x21);
CheckValue<IkReal> x27 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x27.valid){
continue;
}
if((x18) < -0.00001)
continue;
CheckValue<IkReal> x28=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x18)))),-1);
if(!x28.valid){
continue;
}
if( (((1184.07566383686)*pz*(x28.value))) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*pz*(x28.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*(x27.value)))+(IKasin(((1184.07566383686)*pz*(x28.value)))));
IkReal gconst1=((((8.45143113549454)*x22))+(((0.999974527173388)*x23)));
IkReal gconst2=((((-1184.04550208278)*x22))+(((0.00713757692486359)*x23)));
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x29=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(pz*pz)))),-1);
if(!x29.valid){
continue;
}
if( (((1184.07566383686)*pz*(x29.value))) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*pz*(x29.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x30 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x30.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*(IKasin(((1184.07566383686)*pz*(x29.value))))))+(x30.value)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x31=pz*pz;
IkReal x32=IKabs(pz);
IkReal x33=x31;
CheckValue<IkReal> x42 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x42.valid){
continue;
}
IkReal x34=((1.0)*(x42.value));
IkReal x35=x19;
IkReal x43 = x33;
if(IKabs(x43)==0){
continue;
}
IkReal x36=pow(x43,-0.5);
if((x33) < -0.00001)
continue;
CheckValue<IkReal> x44=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x33)))),-1);
if(!x44.valid){
continue;
}
IkReal x37=x44.value;
IkReal x38=(pz*x37);
IkReal x39=x21;
IkReal x40=(x31*x35*x36);
IkReal x41=(pz*x36*x39);
px=0;
py=0;
pp=x31;
sj2=gconst1;
cj2=gconst2;
if( (((1184.07653870746)*x38)) < -1-IKFAST_SINCOS_THRESH || (((1184.07653870746)*x38)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*x34))+(IKasin(((1184.07653870746)*x38))));
if( (((1184.07566383686)*x38)) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*x38)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((IKasin(((1184.07566383686)*x38)))+(((-1.0)*x34)));
IkReal gconst1=((((8.45143113549454)*x40))+(((0.999974527173388)*x41)));
IkReal gconst2=((((0.00713757692486359)*x41))+(((-1184.04550208278)*x40)));
j1eval[0]=pz;
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x45=pz*pz;
IkReal x46=IKabs(pz);
IkReal x47=x45;
CheckValue<IkReal> x56 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x56.valid){
continue;
}
IkReal x48=((1.0)*(x56.value));
IkReal x49=x19;
IkReal x57 = x47;
if(IKabs(x57)==0){
continue;
}
IkReal x50=pow(x57,-0.5);
if((x47) < -0.00001)
continue;
CheckValue<IkReal> x58=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x47)))),-1);
if(!x58.valid){
continue;
}
IkReal x51=x58.value;
IkReal x52=(pz*x51);
IkReal x53=x21;
IkReal x54=(x45*x49*x50);
IkReal x55=(pz*x50*x53);
px=0;
py=0;
pp=x45;
sj2=gconst1;
cj2=gconst2;
if( (((1184.07653870746)*x52)) < -1-IKFAST_SINCOS_THRESH || (((1184.07653870746)*x52)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*x48))+(IKasin(((1184.07653870746)*x52))));
if( (((1184.07566383686)*x52)) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*x52)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*x48))+(IKasin(((1184.07566383686)*x52))));
IkReal gconst1=((((0.999974527173388)*x55))+(((8.45143113549454)*x54)));
IkReal gconst2=((((-1184.04550208278)*x54))+(((0.00713757692486359)*x55)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x59=pz*pz;
IkReal x60=IKabs(pz);
IkReal x61=x59;
CheckValue<IkReal> x70 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x70.valid){
continue;
}
IkReal x62=((1.0)*(x70.value));
IkReal x63=x19;
IkReal x71 = x61;
if(IKabs(x71)==0){
continue;
}
IkReal x64=pow(x71,-0.5);
if((x61) < -0.00001)
continue;
CheckValue<IkReal> x72=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x61)))),-1);
if(!x72.valid){
continue;
}
IkReal x65=x72.value;
IkReal x66=(pz*x65);
IkReal x67=x21;
IkReal x68=(x59*x63*x64);
IkReal x69=(pz*x64*x67);
px=0;
py=0;
pp=x59;
sj2=gconst1;
cj2=gconst2;
if( (((1184.07653870746)*x66)) < -1-IKFAST_SINCOS_THRESH || (((1184.07653870746)*x66)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((((-1.0)*x62))+(IKasin(((1184.07653870746)*x66))));
if( (((1184.07566383686)*x66)) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*x66)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst0=((((-1.0)*x62))+(IKasin(((1184.07566383686)*x66))));
IkReal gconst1=((((0.999974527173388)*x69))+(((8.45143113549454)*x68)));
IkReal gconst2=((((0.00713757692486359)*x69))+(((-1184.04550208278)*x68)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x73=((0.2802)*gconst1);
IkReal x74=((0.002)*gconst2);
CheckValue<IkReal> x75=IKPowWithIntegerCheck(pz,-1);
if(!x75.valid){
continue;
}
CheckValue<IkReal> x76=IKPowWithIntegerCheck((((pz*x73))+((pz*x74))+(((0.0300024)*pz))),-1);
if(!x76.valid){
continue;
}
if( IKabs(((x75.value)*(((-0.0300024)+(((-1.0)*x73))+(((-1.0)*x74)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x76.value)*(((-0.00710502233933983)+(((-0.0662955954014179)*gconst1))+(((-0.00888030274553475)*gconst2))+(((-0.0005604)*(gconst2*gconst2)))+(((0.0005604)*(gconst1*gconst1)))+(((-0.07850804)*gconst1*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x75.value)*(((-0.0300024)+(((-1.0)*x73))+(((-1.0)*x74))))))+IKsqr(((x76.value)*(((-0.00710502233933983)+(((-0.0662955954014179)*gconst1))+(((-0.00888030274553475)*gconst2))+(((-0.0005604)*(gconst2*gconst2)))+(((0.0005604)*(gconst1*gconst1)))+(((-0.07850804)*gconst1*gconst2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x75.value)*(((-0.0300024)+(((-1.0)*x73))+(((-1.0)*x74))))), ((x76.value)*(((-0.00710502233933983)+(((-0.0662955954014179)*gconst1))+(((-0.00888030274553475)*gconst2))+(((-0.0005604)*(gconst2*gconst2)))+(((0.0005604)*(gconst1*gconst1)))+(((-0.07850804)*gconst1*gconst2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x77=IKcos(j1);
IkReal x78=IKsin(j1);
IkReal x79=((0.002)*gconst1);
IkReal x80=((0.2802)*gconst1);
IkReal x81=((0.002)*gconst2);
IkReal x82=((0.2802)*gconst2);
IkReal x83=(pz*x77);
IkReal x84=(pz*x78);
evalcond[0]=((0.236815132767373)+(((-1.0)*x79))+x82+x83);
evalcond[1]=((0.0300024)+x80+x81+x84);
evalcond[2]=((0.0215344888866115)+(((-0.473630265534746)*x83))+(((-1.0)*(pz*pz)))+(((-0.0600048)*x84)));
evalcond[3]=(((x77*x80))+((x77*x81))+(((-0.236815132767373)*x78))+((x78*x79))+(((-1.0)*x78*x82))+(((0.0300024)*x77)));
evalcond[4]=(((x77*x82))+((x78*x81))+((x78*x80))+(((0.0300024)*x78))+pz+(((0.236815132767373)*x77))+(((-1.0)*x77*x79)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x86=IKPowWithIntegerCheck(pz,-1);
if(!x86.valid){
continue;
}
IkReal x85=x86.value;
CheckValue<IkReal> x87=IKPowWithIntegerCheck(x85,-2);
if(!x87.valid){
continue;
}
if( IKabs(((5.05165203354127e-13)*x85*(((4410656397998.79)+(((-31250000000.0)*gconst1))+(((-32989868125000.0)*(x87.value)))+(((4378125000000.0)*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x85*(((-0.236815132767373)+(((0.002)*gconst1))+(((-0.2802)*gconst2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.05165203354127e-13)*x85*(((4410656397998.79)+(((-31250000000.0)*gconst1))+(((-32989868125000.0)*(x87.value)))+(((4378125000000.0)*gconst2))))))+IKsqr((x85*(((-0.236815132767373)+(((0.002)*gconst1))+(((-0.2802)*gconst2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5.05165203354127e-13)*x85*(((4410656397998.79)+(((-31250000000.0)*gconst1))+(((-32989868125000.0)*(x87.value)))+(((4378125000000.0)*gconst2))))), (x85*(((-0.236815132767373)+(((0.002)*gconst1))+(((-0.2802)*gconst2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x88=IKcos(j1);
IkReal x89=IKsin(j1);
IkReal x90=((0.002)*gconst1);
IkReal x91=((0.2802)*gconst1);
IkReal x92=((0.002)*gconst2);
IkReal x93=((0.2802)*gconst2);
IkReal x94=(pz*x88);
IkReal x95=(pz*x89);
evalcond[0]=((0.236815132767373)+x93+x94+(((-1.0)*x90)));
evalcond[1]=((0.0300024)+x91+x92+x95);
evalcond[2]=((0.0215344888866115)+(((-0.473630265534746)*x94))+(((-1.0)*(pz*pz)))+(((-0.0600048)*x95)));
evalcond[3]=((((0.0300024)*x88))+((x89*x90))+(((-0.236815132767373)*x89))+((x88*x92))+((x88*x91))+(((-1.0)*x89*x93)));
evalcond[4]=((((0.0300024)*x89))+((x89*x92))+((x89*x91))+((x88*x93))+pz+(((0.236815132767373)*x88))+(((-1.0)*x88*x90)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x96=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x96.valid){
continue;
}
CheckValue<IkReal> x97 = IKatan2WithCheck(IkReal(((-0.0300024)+(((-0.002)*gconst2))+(((-0.2802)*gconst1)))),IkReal(((-0.236815132767373)+(((0.002)*gconst1))+(((-0.2802)*gconst2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x97.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x96.value)))+(x97.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x98=IKcos(j1);
IkReal x99=IKsin(j1);
IkReal x100=((0.002)*gconst1);
IkReal x101=((0.2802)*gconst1);
IkReal x102=((0.002)*gconst2);
IkReal x103=((0.2802)*gconst2);
IkReal x104=(pz*x98);
IkReal x105=(pz*x99);
evalcond[0]=((0.236815132767373)+(((-1.0)*x100))+x104+x103);
evalcond[1]=((0.0300024)+x105+x101+x102);
evalcond[2]=((0.0215344888866115)+(((-0.0600048)*x105))+(((-1.0)*(pz*pz)))+(((-0.473630265534746)*x104)));
evalcond[3]=((((-1.0)*x103*x99))+(((0.0300024)*x98))+((x100*x99))+((x102*x98))+((x101*x98))+(((-0.236815132767373)*x99)));
evalcond[4]=((((0.0300024)*x99))+((x103*x98))+((x102*x99))+((x101*x99))+pz+(((0.236815132767373)*x98))+(((-1.0)*x100*x98)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x106=pz*pz;
IkReal x107=IKabs(pz);
IkReal x108=x106;
CheckValue<IkReal> x114=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*x107)),-1);
if(!x114.valid){
continue;
}
IkReal x109=x114.value;
IkReal x115 = x108;
if(IKabs(x115)==0){
continue;
}
IkReal x110=pow(x115,-0.5);
CheckValue<IkReal> x116=IKPowWithIntegerCheck(x107,-2);
if(!x116.valid){
continue;
}
if((((1.0)+(((-0.714266882380065)*x106*(x116.value))))) < -0.00001)
continue;
IkReal x111=IKsqrt(((1.0)+(((-0.714266882380065)*x106*(x116.value)))));
IkReal x112=(x106*x109*x110);
IkReal x113=(pz*x110*x111);
CheckValue<IkReal> x117 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x117.valid){
continue;
}
if((x108) < -0.00001)
continue;
CheckValue<IkReal> x118=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x108)))),-1);
if(!x118.valid){
continue;
}
if( (((1184.07566383686)*pz*(x118.value))) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*pz*(x118.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x117.value)))+(((-1.0)*(IKasin(((1184.07566383686)*pz*(x118.value)))))));
IkReal gconst4=((((8.45143113549454)*x112))+(((-0.999974527173388)*x113)));
IkReal gconst5=((((-0.00713757692486359)*x113))+(((-1184.04550208278)*x112)));
CheckValue<IkReal> x119 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x119.valid){
continue;
}
if((pz*pz) < -0.00001)
continue;
CheckValue<IkReal> x120=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(pz*pz)))),-1);
if(!x120.valid){
continue;
}
if( (((1184.07566383686)*pz*(x120.value))) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*pz*(x120.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x119.value)+j2+(IKasin(((1184.07566383686)*pz*(x120.value)))))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
IkReal x121=pz*pz;
IkReal x122=IKabs(pz);
IkReal x123=x121;
CheckValue<IkReal> x132 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x132.valid){
continue;
}
IkReal x124=((1.0)*(x132.value));
IkReal x125=x109;
IkReal x133 = x123;
if(IKabs(x133)==0){
continue;
}
IkReal x126=pow(x133,-0.5);
if((x123) < -0.00001)
continue;
CheckValue<IkReal> x134=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x123)))),-1);
if(!x134.valid){
continue;
}
IkReal x127=x134.value;
IkReal x128=(pz*x127);
IkReal x129=x111;
IkReal x130=(x121*x125*x126);
IkReal x131=(pz*x126*x129);
px=0;
py=0;
pp=x121;
sj2=gconst4;
cj2=gconst5;
if( (((1184.07653870746)*x128)) < -1-IKFAST_SINCOS_THRESH || (((1184.07653870746)*x128)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*(IKasin(((1184.07653870746)*x128)))))+(((-1.0)*x124)));
if( (((1184.07566383686)*x128)) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*x128)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*(IKasin(((1184.07566383686)*x128)))))+(((-1.0)*x124)));
IkReal gconst4=((((-0.999974527173388)*x131))+(((8.45143113549454)*x130)));
IkReal gconst5=((((-1184.04550208278)*x130))+(((-0.00713757692486359)*x131)));
j1eval[0]=pz;
j1eval[1]=IKsign(pz);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x135=pz*pz;
IkReal x136=IKabs(pz);
IkReal x137=x135;
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
IkReal x138=((1.0)*(x146.value));
IkReal x139=x109;
IkReal x147 = x137;
if(IKabs(x147)==0){
continue;
}
IkReal x140=pow(x147,-0.5);
if((x137) < -0.00001)
continue;
CheckValue<IkReal> x148=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x137)))),-1);
if(!x148.valid){
continue;
}
IkReal x141=x148.value;
IkReal x142=(pz*x141);
IkReal x143=x111;
IkReal x144=(x135*x139*x140);
IkReal x145=(pz*x140*x143);
px=0;
py=0;
pp=x135;
sj2=gconst4;
cj2=gconst5;
if( (((1184.07653870746)*x142)) < -1-IKFAST_SINCOS_THRESH || (((1184.07653870746)*x142)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*x138))+(((-1.0)*(IKasin(((1184.07653870746)*x142))))));
if( (((1184.07566383686)*x142)) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*x142)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x138))+(((-1.0)*(IKasin(((1184.07566383686)*x142))))));
IkReal gconst4=((((8.45143113549454)*x144))+(((-0.999974527173388)*x145)));
IkReal gconst5=((((-0.00713757692486359)*x145))+(((-1184.04550208278)*x144)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x149=pz*pz;
IkReal x150=IKabs(pz);
IkReal x151=x149;
CheckValue<IkReal> x160 = IKatan2WithCheck(IkReal(((-140.1)*pz)),IkReal(pz),IKFAST_ATAN2_MAGTHRESH);
if(!x160.valid){
continue;
}
IkReal x152=((1.0)*(x160.value));
IkReal x153=x109;
IkReal x161 = x151;
if(IKabs(x161)==0){
continue;
}
IkReal x154=pow(x161,-0.5);
if((x151) < -0.00001)
continue;
CheckValue<IkReal> x162=IKPowWithIntegerCheck(IKabs(((1401.03568833917)*(IKsqrt(x151)))),-1);
if(!x162.valid){
continue;
}
IkReal x155=x162.value;
IkReal x156=(pz*x155);
IkReal x157=x111;
IkReal x158=(x149*x153*x154);
IkReal x159=(pz*x154*x157);
px=0;
py=0;
pp=x149;
sj2=gconst4;
cj2=gconst5;
if( (((1184.07653870746)*x156)) < -1-IKFAST_SINCOS_THRESH || (((1184.07653870746)*x156)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j2=((3.14159265)+(((-1.0)*x152))+(((-1.0)*(IKasin(((1184.07653870746)*x156))))));
if( (((1184.07566383686)*x156)) < -1-IKFAST_SINCOS_THRESH || (((1184.07566383686)*x156)) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x152))+(((-1.0)*(IKasin(((1184.07566383686)*x156))))));
IkReal gconst4=((((8.45143113549454)*x158))+(((-0.999974527173388)*x159)));
IkReal gconst5=((((-0.00713757692486359)*x159))+(((-1184.04550208278)*x158)));
j1eval[0]=pz;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x163=((0.002)*gconst4);
IkReal x164=((0.2802)*gconst5);
CheckValue<IkReal> x165=IKPowWithIntegerCheck((((pz*x163))+(((-0.236815132767373)*pz))+(((-1.0)*pz*x164))),-1);
if(!x165.valid){
continue;
}
CheckValue<IkReal> x166=IKPowWithIntegerCheck(pz,-1);
if(!x166.valid){
continue;
}
if( IKabs(((x165.value)*(((0.00710502233933983)+(((0.0005604)*(gconst5*gconst5)))+(((-0.0005604)*(gconst4*gconst4)))+(((0.07850804)*gconst4*gconst5))+(((0.00888030274553475)*gconst5))+(((0.0662955954014179)*gconst4)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x166.value)*(((-0.236815132767373)+(((-1.0)*x164))+x163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x165.value)*(((0.00710502233933983)+(((0.0005604)*(gconst5*gconst5)))+(((-0.0005604)*(gconst4*gconst4)))+(((0.07850804)*gconst4*gconst5))+(((0.00888030274553475)*gconst5))+(((0.0662955954014179)*gconst4))))))+IKsqr(((x166.value)*(((-0.236815132767373)+(((-1.0)*x164))+x163))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x165.value)*(((0.00710502233933983)+(((0.0005604)*(gconst5*gconst5)))+(((-0.0005604)*(gconst4*gconst4)))+(((0.07850804)*gconst4*gconst5))+(((0.00888030274553475)*gconst5))+(((0.0662955954014179)*gconst4))))), ((x166.value)*(((-0.236815132767373)+(((-1.0)*x164))+x163))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x167=IKcos(j1);
IkReal x168=IKsin(j1);
IkReal x169=((0.002)*gconst5);
IkReal x170=((0.2802)*gconst4);
IkReal x171=((0.002)*gconst4);
IkReal x172=((0.2802)*gconst5);
IkReal x173=((0.2802)*x167);
IkReal x174=(pz*x168);
IkReal x175=(pz*x167);
evalcond[0]=((0.236815132767373)+(((-1.0)*x171))+x172+x175);
evalcond[1]=((0.0300024)+x170+x174+x169);
evalcond[2]=((0.0215344888866115)+(((-0.0600048)*x174))+(((-1.0)*(pz*pz)))+(((-0.473630265534746)*x175)));
evalcond[3]=((((-0.236815132767373)*x168))+(((0.0300024)*x167))+((x168*x171))+((x167*x170))+((x167*x169))+(((-1.0)*x168*x172)));
evalcond[4]=((((0.0300024)*x168))+((x168*x170))+((x168*x169))+((x167*x172))+pz+(((0.236815132767373)*x167))+(((-1.0)*x167*x171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x177=IKPowWithIntegerCheck(pz,-1);
if(!x177.valid){
continue;
}
IkReal x176=x177.value;
CheckValue<IkReal> x178=IKPowWithIntegerCheck(x176,-2);
if(!x178.valid){
continue;
}
if( IKabs(((5.05165203354127e-13)*x176*(((4410656397998.79)+(((-31250000000.0)*gconst4))+(((-32989868125000.0)*(x178.value)))+(((4378125000000.0)*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x176*(((-0.236815132767373)+(((0.002)*gconst4))+(((-0.2802)*gconst5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.05165203354127e-13)*x176*(((4410656397998.79)+(((-31250000000.0)*gconst4))+(((-32989868125000.0)*(x178.value)))+(((4378125000000.0)*gconst5))))))+IKsqr((x176*(((-0.236815132767373)+(((0.002)*gconst4))+(((-0.2802)*gconst5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5.05165203354127e-13)*x176*(((4410656397998.79)+(((-31250000000.0)*gconst4))+(((-32989868125000.0)*(x178.value)))+(((4378125000000.0)*gconst5))))), (x176*(((-0.236815132767373)+(((0.002)*gconst4))+(((-0.2802)*gconst5))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x179=IKcos(j1);
IkReal x180=IKsin(j1);
IkReal x181=((0.002)*gconst5);
IkReal x182=((0.2802)*gconst4);
IkReal x183=((0.002)*gconst4);
IkReal x184=((0.2802)*gconst5);
IkReal x185=((0.2802)*x179);
IkReal x186=(pz*x180);
IkReal x187=(pz*x179);
evalcond[0]=((0.236815132767373)+(((-1.0)*x183))+x184+x187);
evalcond[1]=((0.0300024)+x186+x181+x182);
evalcond[2]=((0.0215344888866115)+(((-0.473630265534746)*x187))+(((-0.0600048)*x186))+(((-1.0)*(pz*pz))));
evalcond[3]=(((x180*x183))+(((0.0300024)*x179))+((x179*x182))+((x179*x181))+(((-1.0)*x180*x184))+(((-0.236815132767373)*x180)));
evalcond[4]=(((x180*x181))+((x180*x182))+((x179*x184))+(((0.0300024)*x180))+pz+(((-1.0)*x179*x183))+(((0.236815132767373)*x179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x188 = IKatan2WithCheck(IkReal(((-0.0300024)+(((-0.002)*gconst5))+(((-0.2802)*gconst4)))),IkReal(((-0.236815132767373)+(((0.002)*gconst4))+(((-0.2802)*gconst5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x188.valid){
continue;
}
CheckValue<IkReal> x189=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x189.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x188.value)+(((1.5707963267949)*(x189.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x190=IKcos(j1);
IkReal x191=IKsin(j1);
IkReal x192=((0.002)*gconst5);
IkReal x193=((0.2802)*gconst4);
IkReal x194=((0.002)*gconst4);
IkReal x195=((0.2802)*gconst5);
IkReal x196=((0.2802)*x190);
IkReal x197=(pz*x191);
IkReal x198=(pz*x190);
evalcond[0]=((0.236815132767373)+(((-1.0)*x194))+x198+x195);
evalcond[1]=((0.0300024)+x193+x192+x197);
evalcond[2]=((0.0215344888866115)+(((-0.473630265534746)*x198))+(((-0.0600048)*x197))+(((-1.0)*(pz*pz))));
evalcond[3]=((((-1.0)*x191*x195))+(((0.0300024)*x190))+((x191*x194))+((x190*x193))+((x190*x192))+(((-0.236815132767373)*x191)));
evalcond[4]=((((0.0300024)*x191))+(((-1.0)*x190*x194))+pz+((x191*x193))+((x191*x192))+((x190*x195))+(((0.236815132767373)*x190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(pz);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
px=0;
py=0;
pp=0;
pz=0;
j1eval[0]=((1.0)+(((6.00954811644111)*sj2))+(((25.012847301209)*(sj2*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
CheckValue<IkReal> x200 = IKatan2WithCheck(IkReal(((-0.0490094488890082)+(((-0.0354686167271338)*sj2)))),IkReal(((0.0279622530931022)+(((0.279961109088315)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x200.valid){
continue;
}
IkReal x199=x200.value;
j1array[0]=((-1.0)*x199);
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x199)));
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[1];
IkReal x201=IKcos(j1);
IkReal x202=IKsin(j1);
evalcond[0]=((((0.279961109088315)*sj2*x201))+(((0.0490094488890082)*x202))+(((0.0354686167271338)*sj2*x202))+(((0.0279622530931022)*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x203=((0.2802)*cj2);
IkReal x204=((0.002)*sj2);
CheckValue<IkReal> x205=IKPowWithIntegerCheck(((((-1.0)*pz*x203))+(((-0.236815132767373)*pz))+((pz*x204))),-1);
if(!x205.valid){
continue;
}
CheckValue<IkReal> x206=IKPowWithIntegerCheck(pz,-1);
if(!x206.valid){
continue;
}
if( IKabs(((x205.value)*(((0.00654462233933983)+(((0.0662955954014179)*sj2))+(((0.00888030274553475)*cj2))+(((0.07850804)*cj2*sj2))+(((0.0011208)*(cj2*cj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x206.value)*(((-0.236815132767373)+(((-1.0)*x203))+x204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x205.value)*(((0.00654462233933983)+(((0.0662955954014179)*sj2))+(((0.00888030274553475)*cj2))+(((0.07850804)*cj2*sj2))+(((0.0011208)*(cj2*cj2)))))))+IKsqr(((x206.value)*(((-0.236815132767373)+(((-1.0)*x203))+x204))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x205.value)*(((0.00654462233933983)+(((0.0662955954014179)*sj2))+(((0.00888030274553475)*cj2))+(((0.07850804)*cj2*sj2))+(((0.0011208)*(cj2*cj2)))))), ((x206.value)*(((-0.236815132767373)+(((-1.0)*x203))+x204))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x207=IKcos(j1);
IkReal x208=IKsin(j1);
IkReal x209=((0.2802)*sj2);
IkReal x210=((0.2802)*cj2);
IkReal x211=((0.002)*sj2);
IkReal x212=((0.002)*cj2);
IkReal x213=(pz*x208);
IkReal x214=(pz*x207);
evalcond[0]=((0.236815132767373)+x210+x214+(((-1.0)*x211)));
evalcond[1]=((0.0300024)+x212+x213+x209);
evalcond[2]=((0.0215344888866115)+(((-0.473630265534746)*x214))+(((-0.0600048)*x213))+(((-1.0)*(pz*pz))));
evalcond[3]=((((0.0300024)*x207))+((x208*x211))+((x207*x212))+(((-0.236815132767373)*x208))+(((-1.0)*x208*x210))+((x207*x209)));
evalcond[4]=((((0.0300024)*x208))+((x208*x212))+(((-1.0)*x207*x211))+((x207*x210))+pz+(((0.236815132767373)*x207))+((x208*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x216=IKPowWithIntegerCheck(pz,-1);
if(!x216.valid){
continue;
}
IkReal x215=x216.value;
CheckValue<IkReal> x217=IKPowWithIntegerCheck(x215,-2);
if(!x217.valid){
continue;
}
if( IKabs(((5.05165203354127e-13)*x215*(((4410656397998.79)+(((-31250000000.0)*sj2))+(((4378125000000.0)*cj2))+(((-32989868125000.0)*(x217.value))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x215*(((-0.236815132767373)+(((0.002)*sj2))+(((-0.2802)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.05165203354127e-13)*x215*(((4410656397998.79)+(((-31250000000.0)*sj2))+(((4378125000000.0)*cj2))+(((-32989868125000.0)*(x217.value)))))))+IKsqr((x215*(((-0.236815132767373)+(((0.002)*sj2))+(((-0.2802)*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5.05165203354127e-13)*x215*(((4410656397998.79)+(((-31250000000.0)*sj2))+(((4378125000000.0)*cj2))+(((-32989868125000.0)*(x217.value)))))), (x215*(((-0.236815132767373)+(((0.002)*sj2))+(((-0.2802)*cj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x218=IKcos(j1);
IkReal x219=IKsin(j1);
IkReal x220=((0.2802)*sj2);
IkReal x221=((0.2802)*cj2);
IkReal x222=((0.002)*sj2);
IkReal x223=((0.002)*cj2);
IkReal x224=(pz*x219);
IkReal x225=(pz*x218);
evalcond[0]=((0.236815132767373)+x221+x225+(((-1.0)*x222)));
evalcond[1]=((0.0300024)+x220+x223+x224);
evalcond[2]=((0.0215344888866115)+(((-0.0600048)*x224))+(((-1.0)*(pz*pz)))+(((-0.473630265534746)*x225)));
evalcond[3]=((((-1.0)*x219*x221))+(((-0.236815132767373)*x219))+((x219*x222))+((x218*x220))+((x218*x223))+(((0.0300024)*x218)));
evalcond[4]=((((0.236815132767373)*x218))+((x219*x220))+((x219*x223))+pz+(((-1.0)*x218*x222))+((x218*x221))+(((0.0300024)*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x226 = IKatan2WithCheck(IkReal(((-0.0300024)+(((-0.2802)*sj2))+(((-0.002)*cj2)))),IkReal(((-0.236815132767373)+(((0.002)*sj2))+(((-0.2802)*cj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x226.valid){
continue;
}
CheckValue<IkReal> x227=IKPowWithIntegerCheck(IKsign(pz),-1);
if(!x227.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x226.value)+(((1.5707963267949)*(x227.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x228=IKcos(j1);
IkReal x229=IKsin(j1);
IkReal x230=((0.2802)*sj2);
IkReal x231=((0.2802)*cj2);
IkReal x232=((0.002)*sj2);
IkReal x233=((0.002)*cj2);
IkReal x234=(pz*x229);
IkReal x235=(pz*x228);
evalcond[0]=((0.236815132767373)+(((-1.0)*x232))+x231+x235);
evalcond[1]=((0.0300024)+x233+x230+x234);
evalcond[2]=((0.0215344888866115)+(((-0.473630265534746)*x235))+(((-1.0)*(pz*pz)))+(((-0.0600048)*x234)));
evalcond[3]=(((x229*x232))+((x228*x233))+((x228*x230))+(((-0.236815132767373)*x229))+(((-1.0)*x229*x231))+(((0.0300024)*x228)));
evalcond[4]=(((x229*x233))+((x229*x230))+((x228*x231))+(((0.236815132767373)*x228))+pz+(((-1.0)*x228*x232))+(((0.0300024)*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x236=((0.236815132767373)+(((0.2802)*cj2))+(((-0.002)*sj2)));
IkReal x237=((0.0300024)+(((0.2802)*sj2))+(((0.002)*cj2)));
CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal(x236),IkReal(x237),IKFAST_ATAN2_MAGTHRESH);
if(!x240.valid){
continue;
}
IkReal x238=((1.0)*(x240.value));
if((((x237*x237)+(x236*x236))) < -0.00001)
continue;
CheckValue<IkReal> x241=IKPowWithIntegerCheck(IKabs(IKsqrt(((x237*x237)+(x236*x236)))),-1);
if(!x241.valid){
continue;
}
if( ((pz*(x241.value))) < -1-IKFAST_SINCOS_THRESH || ((pz*(x241.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x239=IKasin((pz*(x241.value)));
j1array[0]=((((-1.0)*x238))+(((-1.0)*x239)));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
j1array[1]=((3.14159265358979)+(((-1.0)*x238))+x239);
sj1array[1]=IKsin(j1array[1]);
cj1array[1]=IKcos(j1array[1]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
if( j1array[1] > IKPI )
{
    j1array[1]-=IK2PI;
}
else if( j1array[1] < -IKPI )
{    j1array[1]+=IK2PI;
}
j1valid[1] = true;
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[1];
j0eval[0]=((IKabs(px))+(((0.5)*(IKabs(py)))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs((py*sj1)))+(((0.001)*(IKabs(((118.407566383686)+(((500.0)*cj1*pz))+(((-1.0)*sj2))+(((-500.0)*px*sj1))+(((140.1)*cj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal j0eval[1];
j0eval[0]=((IKabs((cj1*py)))+(((0.001)*(IKabs(((15.0012)+(((500.0)*cj1*px))+cj2+(((500.0)*pz*sj1))+(((140.1)*sj2))))))));
if( IKabs(j0eval[0]) < 0.0000000100000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
j0array[0]=0;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x242=((140.1)*sj2);
IkReal x243=((500.0)*pz*sj1);
IkReal x244=((500.0)*cj1*px);
IkReal x245=((15.0012)+cj2+x243+x242);
op[0]=(x245+x244);
op[1]=((-1000.0)*cj1*py);
op[2]=(x245+(((-1.0)*x244)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x246=((140.1)*cj2);
IkReal x247=((1.0)*sj2);
IkReal x248=((500.0)*cj1*pz);
IkReal x249=((500.0)*px*sj1);
IkReal x250=((118.407566383686)+x246+x248);
op[0]=(x250+(((-1.0)*x249))+(((-1.0)*x247)));
op[1]=((1000.0)*py*sj1);
op[2]=(x250+x249+(((-1.0)*x247)));
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*py);
op[1]=((-2.0)*px);
op[2]=py;
polyroots2(op,zeror,numroots);
IkReal j0array[2], cj0array[2], sj0array[2], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[2]={true,true};
_nj0 = 2;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x252 = IKatan2WithCheck(IkReal(py),IkReal(((-1.0)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x252.valid){
continue;
}
IkReal x251=x252.value;
j0array[0]=((-1.0)*x251);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x251)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x253=cj2*cj2;
IkReal x254=(py*sj0);
IkReal x255=((140.1)*sj2);
IkReal x256=(cj0*px);
IkReal x257=((0.2802)*sj2);
IkReal x258=((1.0)*cj2);
IkReal x259=(cj2*sj2);
IkReal x260=(pz*sj2);
IkReal x261=(cj2*pz);
IkReal x262=((0.002)*cj2);
j1eval[0]=((((-1.0)*x255*x256))+(((-1.0)*x256*x258))+(((-1.0)*x254*x258))+(((-1.0)*x254*x255))+x260+(((-15.0012)*x254))+(((-15.0012)*x256))+(((-140.1)*x261))+(((-118.407566383686)*pz)));
j1eval[1]=IKsign(((((-1.0)*x256*x257))+(((-0.236815132767373)*pz))+(((-1.0)*x254*x257))+(((-0.2802)*x261))+(((-0.0300024)*x256))+(((-0.0300024)*x254))+(((-1.0)*x256*x262))+(((-1.0)*x254*x262))+(((0.002)*x260))));
j1eval[2]=((IKabs(((-0.07941218400576)+(((-0.0001200096)*cj2))+(((-0.0011208)*x259))+(pz*pz)+(((-0.01681334496)*sj2))+(((0.07850804)*x253)))))+(IKabs(((0.00654462233933983)+(((0.0662955954014179)*sj2))+((pz*x256))+((pz*x254))+(((0.0011208)*x253))+(((0.00888030274553475)*cj2))+(((0.07850804)*x259))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[3];
IkReal x263=cj2*cj2;
IkReal x264=(pz*sj2);
IkReal x265=(cj0*px);
IkReal x266=((1.0)*sj2);
IkReal x267=((140.1)*cj2);
IkReal x268=(py*sj0);
IkReal x269=((0.002)*sj2);
IkReal x270=(cj2*sj2);
IkReal x271=((0.2802)*cj2);
IkReal x272=(cj2*pz);
IkReal x273=((1.0)*pz);
j1eval[0]=(((x267*x268))+(((-1.0)*x272))+(((-1.0)*x265*x266))+(((-15.0012)*pz))+(((-1.0)*x266*x268))+(((-140.1)*x264))+((x265*x267))+(((118.407566383686)*x265))+(((118.407566383686)*x268)));
j1eval[1]=((IKabs(((-0.0560854071076285)+(pz*pz)+(((0.000947260531069492)*sj2))+(((-0.132711200402836)*cj2))+(((0.0011208)*x270))+(((-0.07850804)*x263)))))+(IKabs(((0.00654462233933983)+(((0.07850804)*x270))+(((0.0662955954014179)*sj2))+(((0.00888030274553475)*cj2))+(((-1.0)*x265*x273))+(((-1.0)*x268*x273))+(((0.0011208)*x263))))));
j1eval[2]=IKsign(((((-0.0300024)*pz))+(((-0.2802)*x264))+(((-1.0)*x268*x269))+(((-1.0)*x265*x269))+(((-0.002)*x272))+((x265*x271))+(((0.236815132767373)*x265))+(((0.236815132767373)*x268))+((x268*x271))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x274=(py*sj0);
IkReal x275=((0.002)*cj2);
IkReal x276=(cj2*pz);
IkReal x277=(pz*sj2);
IkReal x278=(cj0*px);
IkReal x279=((140.1)*sj2);
IkReal x280=((0.2802)*sj2);
j1eval[0]=((((-1.0)*x277))+((x274*x279))+(((118.407566383686)*pz))+(((15.0012)*x274))+(((15.0012)*x278))+((x278*x279))+((cj2*x274))+((cj2*x278))+(((140.1)*x276)));
j1eval[1]=IKsign((((x275*x278))+((x278*x280))+((x274*x280))+((x274*x275))+(((0.236815132767373)*pz))+(((0.0300024)*x274))+(((0.0300024)*x278))+(((-0.002)*x277))+(((0.2802)*x276))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x281=cj0*cj0;
IkReal x282=py*py;
IkReal x283=cj2*cj2;
IkReal x284=(py*sj0);
IkReal x285=(cj0*px);
IkReal x286=((0.2802)*sj2);
IkReal x287=(cj2*sj2);
IkReal x288=((0.002)*cj2);
IkReal x289=((1.0)*pz);
CheckValue<IkReal> x290=IKPowWithIntegerCheck(IKsign((((x284*x286))+((x284*x288))+((x285*x288))+((x285*x286))+(((-0.002)*pz*sj2))+(((0.236815132767373)*pz))+(((0.2802)*cj2*pz))+(((0.0300024)*x284))+(((0.0300024)*x285)))),-1);
if(!x290.valid){
continue;
}
CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(((-0.00654462233933983)+(((-0.07850804)*x287))+(((-0.00888030274553475)*cj2))+(((-1.0)*x284*x289))+(((-0.0662955954014179)*sj2))+(((-1.0)*x285*x289))+(((-0.0011208)*x283)))),IkReal(((-0.0560854071076285)+(((-0.07850804)*x283))+(((0.0011208)*x287))+(((-1.0)*x281*x282))+x282+(((0.000947260531069492)*sj2))+(((-0.132711200402836)*cj2))+((x281*(px*px)))+(((2.0)*x284*x285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x291.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x290.value)))+(x291.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x292=IKsin(j1);
IkReal x293=IKcos(j1);
IkReal x294=(cj0*px);
IkReal x295=((0.002)*sj2);
IkReal x296=((0.2802)*sj2);
IkReal x297=(py*sj0);
IkReal x298=((0.2802)*cj2);
IkReal x299=((0.002)*cj2);
IkReal x300=(cj2*x292);
IkReal x301=((0.473630265534746)*x292);
IkReal x302=((1.0)*x293);
IkReal x303=(pz*x292);
IkReal x304=(pz*x293);
IkReal x305=((0.0600048)*x293);
evalcond[0]=((0.236815132767373)+(((-1.0)*x295))+x304+x298+((x292*x297))+((x292*x294)));
evalcond[1]=((0.0300024)+(((-1.0)*x294*x302))+(((-1.0)*x297*x302))+x303+x299+x296);
evalcond[2]=((((0.0300024)*x292))+(((-1.0)*x293*x295))+pz+(((0.236815132767373)*x293))+((x293*x298))+((x292*x299))+((x292*x296)));
evalcond[3]=((((-1.0)*x297))+(((-1.0)*x294))+(((0.0300024)*x293))+((x293*x296))+((x293*x299))+(((-0.236815132767373)*x292))+((x292*x295))+(((-1.0)*x292*x298)));
evalcond[4]=((0.0215344888866115)+(((-1.0)*(px*px)))+(((-0.0600048)*x303))+(((-1.0)*x294*x301))+(((-1.0)*x297*x301))+(((-0.473630265534746)*x304))+((x294*x305))+((x297*x305))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x306=cj2*cj2;
IkReal x307=((0.2802)*cj2);
IkReal x308=(py*sj0);
IkReal x309=(cj2*sj2);
IkReal x310=(cj0*px);
IkReal x311=((1.0)*pz);
IkReal x312=((0.002)*sj2);
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal(((-0.0560854071076285)+(((0.0011208)*x309))+(((-0.07850804)*x306))+(pz*pz)+(((0.000947260531069492)*sj2))+(((-0.132711200402836)*cj2)))),IkReal(((0.00654462233933983)+(((0.0011208)*x306))+(((-1.0)*x310*x311))+(((0.0662955954014179)*sj2))+(((0.00888030274553475)*cj2))+(((-1.0)*x308*x311))+(((0.07850804)*x309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
CheckValue<IkReal> x314=IKPowWithIntegerCheck(IKsign(((((-0.002)*cj2*pz))+(((-1.0)*x310*x312))+(((-0.2802)*pz*sj2))+(((-0.0300024)*pz))+(((-1.0)*x308*x312))+((x307*x310))+((x307*x308))+(((0.236815132767373)*x308))+(((0.236815132767373)*x310)))),-1);
if(!x314.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x313.value)+(((1.5707963267949)*(x314.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x315=IKsin(j1);
IkReal x316=IKcos(j1);
IkReal x317=(cj0*px);
IkReal x318=((0.002)*sj2);
IkReal x319=((0.2802)*sj2);
IkReal x320=(py*sj0);
IkReal x321=((0.2802)*cj2);
IkReal x322=((0.002)*cj2);
IkReal x323=(cj2*x315);
IkReal x324=((0.473630265534746)*x315);
IkReal x325=((1.0)*x316);
IkReal x326=(pz*x315);
IkReal x327=(pz*x316);
IkReal x328=((0.0600048)*x316);
evalcond[0]=((0.236815132767373)+((x315*x317))+x327+x321+(((-1.0)*x318))+((x315*x320)));
evalcond[1]=((0.0300024)+(((-1.0)*x317*x325))+(((-1.0)*x320*x325))+x326+x322+x319);
evalcond[2]=(((x315*x319))+pz+((x315*x322))+((x316*x321))+(((0.0300024)*x315))+(((-1.0)*x316*x318))+(((0.236815132767373)*x316)));
evalcond[3]=((((-0.236815132767373)*x315))+(((-1.0)*x315*x321))+(((-1.0)*x320))+((x315*x318))+((x316*x322))+(((-1.0)*x317))+(((0.0300024)*x316))+((x316*x319)));
evalcond[4]=((0.0215344888866115)+(((-1.0)*(px*px)))+((x320*x328))+(((-1.0)*x317*x324))+(((-1.0)*x320*x324))+(((-1.0)*(pz*pz)))+((x317*x328))+(((-0.473630265534746)*x327))+(((-1.0)*(py*py)))+(((-0.0600048)*x326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x329=cj2*cj2;
IkReal x330=(py*sj0);
IkReal x331=((0.002)*cj2);
IkReal x332=(cj2*sj2);
IkReal x333=(cj0*px);
IkReal x334=((0.2802)*sj2);
CheckValue<IkReal> x335=IKPowWithIntegerCheck(IKsign(((((-1.0)*x333*x334))+(((-0.2802)*cj2*pz))+(((-0.236815132767373)*pz))+(((-1.0)*x330*x334))+(((-1.0)*x330*x331))+(((0.002)*pz*sj2))+(((-1.0)*x331*x333))+(((-0.0300024)*x333))+(((-0.0300024)*x330)))),-1);
if(!x335.valid){
continue;
}
CheckValue<IkReal> x336 = IKatan2WithCheck(IkReal(((0.00654462233933983)+(((0.0662955954014179)*sj2))+(((0.00888030274553475)*cj2))+(((0.0011208)*x329))+((pz*x330))+((pz*x333))+(((0.07850804)*x332)))),IkReal(((-0.07941218400576)+(((-0.0001200096)*cj2))+(pz*pz)+(((-0.0011208)*x332))+(((-0.01681334496)*sj2))+(((0.07850804)*x329)))),IKFAST_ATAN2_MAGTHRESH);
if(!x336.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x335.value)))+(x336.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x337=IKsin(j1);
IkReal x338=IKcos(j1);
IkReal x339=(cj0*px);
IkReal x340=((0.002)*sj2);
IkReal x341=((0.2802)*sj2);
IkReal x342=(py*sj0);
IkReal x343=((0.2802)*cj2);
IkReal x344=((0.002)*cj2);
IkReal x345=(cj2*x337);
IkReal x346=((0.473630265534746)*x337);
IkReal x347=((1.0)*x338);
IkReal x348=(pz*x337);
IkReal x349=(pz*x338);
IkReal x350=((0.0600048)*x338);
evalcond[0]=((0.236815132767373)+((x337*x342))+((x337*x339))+x343+x349+(((-1.0)*x340)));
evalcond[1]=((0.0300024)+x341+x344+x348+(((-1.0)*x342*x347))+(((-1.0)*x339*x347)));
evalcond[2]=((((0.236815132767373)*x338))+(((0.0300024)*x337))+((x337*x341))+((x337*x344))+pz+((x338*x343))+(((-1.0)*x338*x340)));
evalcond[3]=((((0.0300024)*x338))+((x337*x340))+(((-1.0)*x337*x343))+(((-1.0)*x339))+((x338*x341))+((x338*x344))+(((-1.0)*x342))+(((-0.236815132767373)*x337)));
evalcond[4]=((0.0215344888866115)+(((-1.0)*(px*px)))+(((-0.473630265534746)*x349))+((x342*x350))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((-1.0)*x342*x346))+(((-0.0600048)*x348))+(((-1.0)*x339*x346))+((x339*x350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - roarm_description (eddeeea4ebe8704e63599f5df4a9927b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

